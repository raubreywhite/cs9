[{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Introduction","text":"1 argset data (named list) argset (named list) … (optional arguments) argset (named list) tables (named list) data (named list, returned data_selector_fn) argset (named list) tables (named list) 1 argset 1 action_fn 1 data-pull (using data_selector_fn) 1 list sc analyses 1 list plans","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"tasks","dir":"Articles","previous_headings":"","what":"Tasks","title":"Introduction","text":"task basic operational unit cs9. based plnr. short, can think task multiple plnr plans plus csdb tables. Figure 1. general task showing many options task. Figure 1 shows us full potential task. Data can read sources, within plan data extracted data_selector_fn (.e. “one data-pull”). data provided analysis, run action_fn : provided data provided argset provided tables action_fn can : Write data/results db tables Send emails Export graphs, excel files, reports, physical files Typically subset done single task.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"plan-heavy-or-analysis-heavy-tasks","dir":"Articles","previous_headings":"Tasks","what":"Plan-heavy or analysis-heavy tasks?","title":"Introduction","text":"plan-heavy task one many plans analyses per plan. analysis-heavy task one plans many analyses per plan. general, data-pull slow wastes time. means preferable reduce number data-pulls performed data-pull extract larger quantities data. analysis can subset data required (identifed via argsets). .e. possible, analysis-heavy task preferable faster (cost needing RAM). Obviously, plan’s data-pull larger, use RAM. need conserve RAM, use plan-heavy approach. Figure 1 shows 2 location based analyses, reality 356 municipalities Norway 2021. figure 1 2 plans (1 2021 data, 1 2020 data) 356 analyses plan (1 location_code) taking analysis-heavy approach.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"putting-it-together","dir":"Articles","previous_headings":"","what":"Putting it together","title":"Introduction","text":"Figure 2. typical file setup implementation Core Surveillance 9. \\(plan_argset_fn\\) rarely used, therefore shown blacked tasks.. Figure 2 shows typical implementation Core Surveillance 9. config_db.r contains Core Surveillance 9 db tables definitions. .e. long list sc::add_schema_v8 commands. config_tasks.r contains task definitions. .e. long list sc::add_task_from_config_v8 commands. one file task contains action_fn, data_selector_fn functions relevant task hand.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Introduction","text":"now go example person design implement tasks relating weather","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"surveillance-system","dir":"Articles","previous_headings":"Example","what":"Surveillance system","title":"Introduction","text":"begin creating surveillance system. hub coordinates everything.","code":"ss <- cs9::SurveillanceSystem_v9$new()"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"add_table","dir":"Articles","previous_headings":"Example","what":"add_table","title":"Introduction","text":"documented detail , create database table fits needs (recording weather data), add surveillance system.","code":"#> Error in knitr::include_graphics(system.file(\"vignette_resources/tasks/addins_1.png\", : Cannot find the file(s): \"\" ss$add_table(   name_access = c(\"anon\"),   name_grouping = \"example_weather\",   name_variant = NULL,   field_types =  c(     \"granularity_time\" = \"TEXT\",     \"granularity_geo\" = \"TEXT\",     \"country_iso3\" = \"TEXT\",     \"location_code\" = \"TEXT\",     \"border\" = \"INTEGER\",     \"age\" = \"TEXT\",     \"sex\" = \"TEXT\",      \"isoyear\" = \"INTEGER\",     \"isoweek\" = \"INTEGER\",     \"isoyearweek\" = \"TEXT\",     \"season\" = \"TEXT\",     \"seasonweek\" = \"DOUBLE\",      \"calyear\" = \"INTEGER\",     \"calmonth\" = \"INTEGER\",     \"calyearmonth\" = \"TEXT\",      \"date\" = \"DATE\",      \"tg\" = \"DOUBLE\",     \"tx\" = \"DOUBLE\",     \"tn\" = \"DOUBLE\"   ),   keys = c(     \"granularity_time\",     \"location_code\",     \"date\",     \"age\",     \"sex\"   ),   validator_field_types = csdb::validator_field_types_csfmt_rts_data_v1,   validator_field_contents = csdb::validator_field_contents_csfmt_rts_data_v1 )"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"add_task","dir":"Articles","previous_headings":"Example","what":"add_task","title":"Introduction","text":"“register” task, use RStudio addin task_from_config. number important things code need highlighting.","code":"#> Error in knitr::include_graphics(system.file(\"vignette_resources/tasks/addins_2.png\", : Cannot find the file(s): \"\" # tm_run_task(\"example_weather_import_data_from_api\") ss$add_task(   name_grouping = \"example_weather\",   name_action = \"import_data_from_api\",   name_variant = NULL,   cores = 1,   plan_analysis_fn_name = NULL, # \"PACKAGE::TASK_NAME_plan_analysis\"   for_each_plan = plnr::expand_list(     location_code = \"county03\" # fhidata::norway_locations_names()[granularity_geo %in% c(\"county\")]$location_code   ),   for_each_analysis = NULL,   universal_argset = NULL,   upsert_at_end_of_each_plan = FALSE,   insert_at_end_of_each_plan = FALSE,   action_fn_name = \"example_weather_import_data_from_api_action\",   data_selector_fn_name = \"example_weather_import_data_from_api_data_selector\",   tables = list(     # input      # output     \"anon_example_weather\" = ss$tables$anon_example_weather   ) )"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"for_each_plan","dir":"Articles","previous_headings":"Example > add_task","what":"for_each_plan","title":"Introduction","text":"for_each_plan expects list. component list correspond plan, values added argset analyses inside plan. example, following code give 4 plans, 1 analysis per plan, analysis containing argset$var_1 argset$var_2 appropriate. always need least 1 plan. simple plan possible :","code":"for_each_plan <- list() for_each_plan[[1]] <- list(   var_1 = 1,   var_2 = \"a\" ) for_each_plan[[2]] <- list(   var_1 = 2,   var_2 = \"b\" ) for_each_plan[[3]] <- list(   var_1 = 1,   var_2 = \"a\" ) for_each_plan[[4]] <- list(   var_1 = 2,   var_2 = \"b\" ) plnr::expand_list(   x = 1 ) #> [[1]] #> [[1]]$x #> [1] 1"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"plnrexpand_list","dir":"Articles","previous_headings":"Example > add_task","what":"plnr::expand_list","title":"Introduction","text":"plnr::expand_list esentially expand.grid, except return values lists instead data.frame. code simplified follows.","code":"for_each_plan <- plnr::expand_list(   var_1 = c(1,2),   var_2 = c(\"a\", \"b\") ) for_each_plan #> [[1]] #> [[1]]$var_1 #> [1] 1 #>  #> [[1]]$var_2 #> [1] \"a\" #>  #>  #> [[2]] #> [[2]]$var_1 #> [1] 2 #>  #> [[2]]$var_2 #> [1] \"a\" #>  #>  #> [[3]] #> [[3]]$var_1 #> [1] 1 #>  #> [[3]]$var_2 #> [1] \"b\" #>  #>  #> [[4]] #> [[4]]$var_1 #> [1] 2 #>  #> [[4]]$var_2 #> [1] \"b\""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"for_each_analysis","dir":"Articles","previous_headings":"Example > add_task","what":"for_each_analysis","title":"Introduction","text":"for_each_plan expects list, generate length(for_each_plan) plans. for_each_analysis , except generate analyses within plans.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"universal_argset","dir":"Articles","previous_headings":"Example > add_task","what":"universal_argset","title":"Introduction","text":"named list add values argset analyses.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"upsert_at_end_of_each_plan","dir":"Articles","previous_headings":"Example > add_task","what":"upsert_at_end_of_each_plan","title":"Introduction","text":"TRUE tables contains table called output, returned values action_fn stored upserted tables$output end plan. TRUE returned values action_fn named lists, values within named lists stored upserted tables$NAME_FROM_LIST end plan. choose upsert/insert manually within action_fn, can end analysis.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"insert_at_end_of_each_plan","dir":"Articles","previous_headings":"Example > add_task","what":"insert_at_end_of_each_plan","title":"Introduction","text":"TRUE tables contains table called output, returned values action_fn stored inserted tables$output end plan. TRUE returned values action_fn named lists, values within named lists stored inserted tables$NAME_FROM_LIST end plan. choose upsert/insert manually within action_fn, can end analysis.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"action_fn_name","dir":"Articles","previous_headings":"Example > add_task","what":"action_fn_name","title":"Introduction","text":"character string action_fn, preferably including package name.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"data_selector_fn_name","dir":"Articles","previous_headings":"Example > add_task","what":"data_selector_fn_name","title":"Introduction","text":"character string data_selector_fn, preferably including package name.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"schema","dir":"Articles","previous_headings":"Example > add_task","what":"schema","title":"Introduction","text":"named list containing schemas used task.","code":""},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"data_selector_fn","dir":"Articles","previous_headings":"Example","what":"data_selector_fn","title":"Introduction","text":"Use addins dropdown easily add boilerplate code. data_selector_fn used extract data plan. lines inside (plnr::is_run_directly()){ used help developers. can run code manually/interactively “load” values argset schema.","code":"#> Error in knitr::include_graphics(system.file(\"vignette_resources/tasks/addins_3.png\", : Cannot find the file(s): \"\" index_plan <- 1  argset <- ss$shortcut_get_argset(\"example_weather_import_data_from_api\", index_plan = index_plan) tables <- ss$shortcut_get_tables(\"example_weather_import_data_from_api\")  print(argset) #> $`**universal**` #> [1] \"*\" #>  #> $`**plan**` #> [1] \"*\" #>  #> $location_code #> [1] \"county03\" #>  #> $`**analysis**` #> [1] \"*\" #>  #> $`**automatic**` #> [1] \"*\" #>  #> $index #> [1] 1 #>  #> $today #> [1] \"2024-05-27\" #>  #> $yesterday #> [1] \"2024-05-26\" #>  #> $index_plan #> [1] 1 #>  #> $index_analysis #> [1] 1 #>  #> $first_analysis #> [1] TRUE #>  #> $last_analysis #> [1] TRUE #>  #> $within_plan_first_analysis #> [1] TRUE #>  #> $within_plan_last_analysis #> [1] TRUE print(tables) #> $anon_example_weather #> Error in cat(self$table_name_fully_specified, crayon::bgRed(crayon::white(\"(disconnected)\\n\\n\"))): argument 1 (type 'S4') cannot be handled by 'cat' # **** data_selector **** ---- #' example_weather_import_data_from_api (data selector) #' @param argset Argset #' @param tables DB tables #' @export example_weather_import_data_from_api_data_selector = function(argset, tables){   if(plnr::is_run_directly()){     # sc::tm_get_plans_argsets_as_dt(\"example_weather_import_data_from_api\")      index_plan <- 1      argset <- ss$shortcut_get_argset(\"example_weather_import_data_from_api\", index_plan = index_plan)     tables <- ss$shortcut_get_tables(\"example_weather_import_data_from_api\")   }    # find the mid lat/long for the specified location_code   gps <- fhimaps::norway_nuts3_map_b2020_default_dt[location_code == argset$location_code,.(     lat = mean(lat),     long = mean(long)   )]    # download the forecast for the specified location_code   d <- httr::GET(glue::glue(\"https://api.met.no/weatherapi/locationforecast/2.0/classic?lat={gps$lat}&lon={gps$long}\"), httr::content_type_xml())   d <- xml2::read_xml(d$content)    # The variable returned must be a named list   retval <- list(     \"data\" = d   )   retval }"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"action_fn","dir":"Articles","previous_headings":"Example","what":"action_fn","title":"Introduction","text":"lines inside (plnr::is_run_directly()){ used help developers. can run code manually/interactively “load” values argset schema.","code":"index_plan <- 1 index_analysis <- 1  data <- ss$shortcut_get_data(\"example_weather_import_data_from_api\", index_plan = index_plan) argset <- ss$shortcut_get_argset(\"example_weather_import_data_from_api\", index_plan = index_plan, index_analysis = index_analysis) tables <- ss$shortcut_get_tables(\"example_weather_import_data_from_api\")  print(data) #> $data #> {xml_document} #> <weatherdata noNamespaceSchemaLocation=\"https://schema.api.met.no/schemas/weatherapi-0.4.xsd\" created=\"2024-05-27T14:11:08Z\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> #> [1] <meta>\\n  <model name=\"met_public_forecast\" termin=\"2024-05-27T14 ... #> [2] <product class=\"pointData\">\\n  <time datatype=\"forecast\" from=\"20 ... #>  #> $hash #> $hash$current #> [1] \"fa7c1fd90a6d9bf24040ae24919e6972\" #>  #> $hash$current_elements #> $hash$current_elements$data #> [1] \"edf868d91cd1f5fe47b57b2aeb1d010d\" print(argset) #> $`**universal**` #> [1] \"*\" #>  #> $`**plan**` #> [1] \"*\" #>  #> $location_code #> [1] \"county03\" #>  #> $`**analysis**` #> [1] \"*\" #>  #> $`**automatic**` #> [1] \"*\" #>  #> $index #> [1] 1 #>  #> $today #> [1] \"2024-05-27\" #>  #> $yesterday #> [1] \"2024-05-26\" #>  #> $index_plan #> [1] 1 #>  #> $index_analysis #> [1] 1 #>  #> $first_analysis #> [1] TRUE #>  #> $last_analysis #> [1] TRUE #>  #> $within_plan_first_analysis #> [1] TRUE #>  #> $within_plan_last_analysis #> [1] TRUE print(tables) #> $anon_example_weather #> Error in cat(self$table_name_fully_specified, crayon::bgRed(crayon::white(\"(disconnected)\\n\\n\"))): argument 1 (type 'S4') cannot be handled by 'cat' # **** action **** ---- #' example_weather_import_data_from_api (action) #' @param data Data #' @param argset Argset #' @param tables DB tables #' @export example_weather_import_data_from_api_action <- function(data, argset, tables) {   # tm_run_task(\"example_weather_import_data_from_api\")    if(plnr::is_run_directly()){     # sc::tm_get_plans_argsets_as_dt(\"example_weather_import_data_from_api\")      index_plan <- 1     index_analysis <- 1      data <- ss$shortcut_get_data(\"example_weather_import_data_from_api\", index_plan = index_plan)     argset <- ss$shortcut_get_argset(\"example_weather_import_data_from_api\", index_plan = index_plan, index_analysis = index_analysis)     tables <- ss$shortcut_get_tables(\"example_weather_import_data_from_api\")   }    # code goes here   # special case that runs before everything   if(argset$first_analysis == TRUE){    }    a <- data$data    baz <- xml2::xml_find_all(a, \".//maxTemperature\")   res <- vector(\"list\", length = length(baz))   for (i in seq_along(baz)) {     parent <- xml2::xml_parent(baz[[i]])     grandparent <- xml2::xml_parent(parent)     time_from <- xml2::xml_attr(grandparent, \"from\")     time_to <- xml2::xml_attr(grandparent, \"to\")     x <- xml2::xml_find_all(parent, \".//minTemperature\")     temp_min <- xml2::xml_attr(x, \"value\")     x <- xml2::xml_find_all(parent, \".//maxTemperature\")     temp_max <- xml2::xml_attr(x, \"value\")     res[[i]] <- data.frame(       time_from = as.character(time_from),       time_to = as.character(time_to),       tx = as.numeric(temp_max),       tn = as.numeric(temp_min)     )   }   res <- rbindlist(res)   res <- res[stringr::str_sub(time_from, 12, 13) %in% c(\"00\", \"06\", \"12\", \"18\")]   res[, date := as.Date(stringr::str_sub(time_from, 1, 10))]   res[, N := .N, by = date]   res <- res[N == 4]   res <- res[     ,     .(       tg = NA,       tx = max(tx),       tn = min(tn)     ),     keyby = .(date)   ]    # we look at the downloaded data   print(\"Data after downloading\")   print(res)    # we now need to format it   res[, granularity_time := \"day\"]   res[, sex := \"total\"]   res[, age := \"total\"]   res[, location_code := argset$location_code]   res[, border := 2020]    # fill in missing structural variables   cstidy::set_csfmt_rts_data_v1(res)    # we look at the downloaded data   print(\"Data after missing structural variables filled in\")   print(res)    # put data in db table   # tables$TABLE_NAME$insert_data(d)   tables$anon_example_weather$upsert_data(res)   # tables$TABLE_NAME$drop_all_rows_and_then_upsert_data(d)    # special case that runs after everything   # copy to anon_web?   if(argset$last_analysis == TRUE){     # sc::copy_into_new_table_where(     #   table_from = \"anon_X\",     #   table_to = \"anon_web_X\"     # )   } }"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"run-the-task","dir":"Articles","previous_headings":"Example","what":"Run the task","title":"Introduction","text":"","code":"ss$run_task(\"example_weather_import_data_from_api\") #> task: example_weather_import_data_from_api #> Running task=example_weather_import_data_from_api with plans=1 and analyses=1 #> plans=sequential, argset=sequential with cores=1 #> Creating table config_data_hash_for_each_plan #> [1] \"CREATE TABLE dbo.\\\"config_data_hash_for_each_plan\\\" (\\n  \\\"task\\\" VARCHAR NOT NULL,\\n  \\\"index_plan\\\" INTEGER NOT NULL,\\n  \\\"element_tag\\\" VARCHAR NOT NULL,\\n  \\\"date\\\" DATE NOT NULL,\\n  \\\"datetime\\\" TIMESTAMP NOT NULL,\\n  \\\"element_hash\\\" VARCHAR,\\n  \\\"all_hash\\\" VARCHAR\\n)\\n\" #> Error: nanodbc/nanodbc.cpp:1771: 00000 #> ERROR: schema \"dbo\" does not exist; #> Error while executing the query  #>  RROR: schema \"dbo\" does not exist; #> Error while executing the query  #> <SQL> 'CREATE TABLE dbo.\"config_data_hash_for_each_plan\" ( #>   \"task\" VARCHAR NOT NULL, #>   \"index_plan\" INTEGER NOT NULL, #>   \"element_tag\" VARCHAR NOT NULL, #>   \"date\" DATE NOT NULL, #>   \"datetime\" TIMESTAMP NOT NULL, #>   \"element_hash\" VARCHAR, #>   \"all_hash\" VARCHAR #> ) #> ' #> Creating table config_tasks_stats #> [1] \"CREATE TABLE dbo.\\\"config_tasks_stats\\\" (\\n  \\\"task\\\" VARCHAR NOT NULL,\\n  \\\"sc_version\\\" VARCHAR,\\n  \\\"implementation_version\\\" VARCHAR,\\n  \\\"cores_n\\\" INTEGER,\\n  \\\"plans_n\\\" INTEGER,\\n  \\\"analyses_n\\\" INTEGER,\\n  \\\"start_date\\\" DATE,\\n  \\\"start_datetime\\\" TIMESTAMP NOT NULL,\\n  \\\"stop_date\\\" DATE,\\n  \\\"stop_datetime\\\" TIMESTAMP,\\n  \\\"runtime_minutes\\\" REAL,\\n  \\\"ram_all_cores_mb\\\" REAL,\\n  \\\"ram_per_core_mb\\\" REAL,\\n  \\\"status\\\" VARCHAR\\n)\\n\" #> Error: nanodbc/nanodbc.cpp:1771: 00000 #> ERROR: schema \"dbo\" does not exist; #> Error while executing the query  #>  RROR: schema \"dbo\" does not exist; #> Error while executing the query  #> <SQL> 'CREATE TABLE dbo.\"config_tasks_stats\" ( #>   \"task\" VARCHAR NOT NULL, #>   \"sc_version\" VARCHAR, #>   \"implementation_version\" VARCHAR, #>   \"cores_n\" INTEGER, #>   \"plans_n\" INTEGER, #>   \"analyses_n\" INTEGER, #>   \"start_date\" DATE, #>   \"start_datetime\" TIMESTAMP NOT NULL, #>   \"stop_date\" DATE, #>   \"stop_datetime\" TIMESTAMP, #>   \"runtime_minutes\" REAL, #>   \"ram_all_cores_mb\" REAL, #>   \"ram_per_core_mb\" REAL, #>   \"status\" VARCHAR #> ) #> '"},{"path":[]},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"importing-data","dir":"Articles","previous_headings":"Different types of tasks","what":"Importing data","title":"Introduction","text":"","code":"ss$add_task(   name_grouping = \"example\",   name_action = \"import_data\",   name_variant = NULL,   cores = 1,   plan_analysis_fn_name = NULL,   for_each_plan = plnr::expand_list(     x = 1   ),   for_each_analysis = NULL,   universal_argset = list(     folder = cs9::path(\"input\", \"example\")   ),   upsert_at_end_of_each_plan = FALSE,   insert_at_end_of_each_plan = FALSE,   action_fn_name = \"example_import_data_action\",   data_selector_fn_name = \"example_import_data_data_selector\",   tables = list(     # input      # output     \"output\" = ss$tables$output   ) )"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"analysis","dir":"Articles","previous_headings":"Different types of tasks","what":"Analysis","title":"Introduction","text":"","code":"ss$add_task(   name_grouping = \"example\",   name_action = \"analysis\",   name_variant = NULL,   cores = 1,   plan_analysis_fn_name = NULL,   for_each_plan = plnr::expand_list(     location_code = csdata::nor_locations_names()[granularity_geo %in% c(\"county\")]$location_code   ),   for_each_analysis = NULL,   universal_argset = NULL,   upsert_at_end_of_each_plan = FALSE,   insert_at_end_of_each_plan = FALSE,   action_fn_name = \"example_analysis_action\",   data_selector_fn_name = \"example_analysis_data_selector\",   tables = list(     # input     \"input\" = ss$tables$input,      # output     \"output\" = ss$tables   ) )"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"exporting-multiple-sets-of-results","dir":"Articles","previous_headings":"Different types of tasks","what":"Exporting multiple sets of results","title":"Introduction","text":"","code":"ss$add_task(   name_grouping = \"example\",   name_action = \"export_results\",   name_variant = NULL,   cores = 1,   plan_analysis_fn_name = NULL,   for_each_plan = plnr::expand_list(     location_code = csdata::nor_locations_names()[granularity_geo %in% c(\"county\")]$location_code   ),   for_each_analysis = NULL,   universal_argset = list(     folder = cs9::path(\"output\", \"example\")   ),   upsert_at_end_of_each_plan = FALSE,   insert_at_end_of_each_plan = FALSE,   action_fn_name = \"example_export_results_action\",   data_selector_fn_name = \"example_export_results_data_selector\",   tables = list(     # input     \"input\" = ss$tables$input      # output   ) )"},{"path":"https://www.csids.no/cs9/articles/cs9.html","id":"exporting-combined-results","dir":"Articles","previous_headings":"Different types of tasks","what":"Exporting combined results","title":"Introduction","text":"","code":"ss$tables(   name_grouping = \"example\",   name_action = \"export_results\",   name_variant = NULL,   cores = 1,   plan_analysis_fn_name = NULL,   for_each_plan = plnr::expand_list(     x = 1   ),   for_each_analysis = NULL,   universal_argset = list(     folder = cs9::path(\"output\", \"example\"),     granularity_geos = c(\"nation\", \"county\")   ),   upsert_at_end_of_each_plan = FALSE,   insert_at_end_of_each_plan = FALSE,   action_fn_name = \"example_export_results_action\",   data_selector_fn_name = \"example_export_results_data_selector\",   tables = list(     # input     \"input\" = ss$tables$input      # output   ) )"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"env_and_namespace-r","dir":"Articles","previous_headings":"","what":"00_env_and_namespace.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/00_env_and_namespace.R","code":"https://github.com/csids/cs9example/blob/main/R/00_env_and_namespace.R   1 | # ******************************************************************************  2 | # ******************************************************************************  3 | #  4 | # 00_env_and_namespace.R  5 | #  6 | # PURPOSE 1:  7 | #   Use roxygen2 to import ggplot2, data.table, %>%, and %<>% into the namespace,  8 | #   because these are the most commonly used packages/functions.  9 | # 10 | # PURPOSE 2: 11 | #   Declaration of environments that can be used globally. 12 | # 13 | # PURPOSE 3: 14 | #   Fix issues/integration with other packages. 15 | # 16 | #   Most notably is the issue with rmarkdown, where an error is thrown when 17 | #   rendering multiple rmarkdown documents in parallel. 18 | # 19 | # ****************************************************************************** 20 | # ****************************************************************************** 21 |  22 | #' @import ggplot2 23 | #' @import data.table 24 | #' @importFrom magrittr %>% %<>% 25 | 1 26 |  27 | #' Declaration of environments that can be used globally 28 | #' @export global 29 | global <- new.env() 30 |  31 | # https://github.com/rstudio/rmarkdown/issues/1632 32 | # An error is thrown when rendering multiple rmarkdown documents in parallel. 33 | clean_tmpfiles_mod <- function() { 34 |   # message(\"Calling clean_tmpfiles_mod()\") 35 | }"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"definitions-r","dir":"Articles","previous_headings":"","what":"01_definitions.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/01_definitions.R","code":"https://github.com/csids/cs9example/blob/main/R/01_definitions.R   1 | # ******************************************************************************  2 | # ******************************************************************************  3 | #  4 | # 01_definitions.R  5 | #  6 | # PURPOSE 1:  7 | #   Set global definitions that are used throughout the package, and further  8 | #   (e.g. in shiny/plumber creations).  9 | # 10 | #   Examples of global definitions are: 11 | #     - Border years 12 | #     - Age definitions 13 | #     - Diagnosis mappings (e.g. \"R80\" = \"Influenza\") 14 | # 15 | # ****************************************************************************** 16 | # ****************************************************************************** 17 |  18 | #' Set global definitions 19 | set_definitions <- function() { 20 |  21 |   # Norway's last redistricting occurred 2024-01-01 22 |   global$border <- 2024 23 |  24 |   csdata::set_config( 25 |     border_nor = global$border 26 |   ) 27 | }"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"surveillance_systems-r","dir":"Articles","previous_headings":"","what":"02_surveillance_systems.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/02_surveillance_systems.R","code":"https://github.com/csids/cs9example/blob/main/R/02_surveillance_systems.R   1 | # ******************************************************************************  2 | # ******************************************************************************  3 | #  4 | # 02_surveillance_systems.R  5 | #  6 | # PURPOSE 1:  7 | #   Initialize surveillance systems  8 | #  9 | # ****************************************************************************** 10 | # ****************************************************************************** 11 |  12 | set_surveillance_systems <- function() { 13 |   global$ss <- cs9::SurveillanceSystem_v9$new() 14 | }"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"tables-r","dir":"Articles","previous_headings":"","what":"03_tables.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/03_tables.R","code":"https://github.com/csids/cs9example/blob/main/R/03_tables.R    1 | # ******************************************************************************   2 | # ******************************************************************************   3 | #   4 | # 03_db_tables.R   5 | #   6 | # PURPOSE 1:   7 | #   Set db tables that are used throughout the package.   8 | #   9 | # ******************************************************************************  10 | # ******************************************************************************  11 |   12 | set_db_tables <- function() {  13 |   # __________ ----  14 |   # Covid-19  ----  15 |   ## > anon_covid19_data ----  16 |   global$ss$add_table(  17 |     name_access = c(\"anon\"),  18 |     name_grouping = \"covid19\",  19 |     name_variant = \"data\",  20 |     field_types =  c(  21 |       \"granularity_time\" = \"TEXT\",  22 |       \"granularity_geo\" = \"TEXT\",  23 |       \"country_iso3\" = \"TEXT\",  24 |       \"location_code\" = \"TEXT\",  25 |       \"border\" = \"INTEGER\",  26 |       \"age\" = \"TEXT\",  27 |       \"sex\" = \"TEXT\",  28 |   29 |       \"isoyear\" = \"INTEGER\",  30 |       \"isoweek\" = \"INTEGER\",  31 |       \"isoyearweek\" = \"TEXT\",  32 |       \"season\" = \"TEXT\",  33 |       \"seasonweek\" = \"DOUBLE\",  34 |   35 |       \"calyear\" = \"INTEGER\",  36 |       \"calmonth\" = \"INTEGER\",  37 |       \"calyearmonth\" = \"TEXT\",  38 |   39 |       \"date\" = \"DATE\",  40 |   41 |       \"covid19_cases_testdate_n\" = \"INTEGER\",  42 |       \"covid19_cases_testdate_pr100000\" = \"DOUBLE\"  43 |     ),  44 |     keys = c(  45 |       \"granularity_time\",  46 |       \"location_code\",  47 |       \"date\",  48 |       \"age\",  49 |       \"sex\"  50 |     ),  51 |     indexes = list(  52 |       \"ind1\" = c(\"granularity_time\", \"granularity_geo\", \"country_iso3\", \"location_code\", \"border\", \"age\", \"sex\", \"date\", \"isoyear\", \"isoweek\", \"isoyearweek\")  53 |     ),  54 |     validator_field_types = csdb::validator_field_types_blank,  55 |     validator_field_contents = csdb::validator_field_contents_blank  56 |   )  57 |   58 |   # __________ ----  59 |   # Weather  ----  60 |   ## > anon_example_weather_rawdata ----  61 |   global$ss$add_table(  62 |     name_access = c(\"anon\"),  63 |     name_grouping = \"example_weather\",  64 |     name_variant = \"rawdata\",  65 |     field_types =  c(  66 |       \"granularity_time\" = \"TEXT\",  67 |       \"granularity_geo\" = \"TEXT\",  68 |       \"country_iso3\" = \"TEXT\",  69 |       \"location_code\" = \"TEXT\",  70 |       \"border\" = \"INTEGER\",  71 |       \"age\" = \"TEXT\",  72 |       \"sex\" = \"TEXT\",  73 |   74 |       \"isoyear\" = \"INTEGER\",  75 |       \"isoweek\" = \"INTEGER\",  76 |       \"isoyearweek\" = \"TEXT\",  77 |       \"season\" = \"TEXT\",  78 |       \"seasonweek\" = \"DOUBLE\",  79 |   80 |       \"calyear\" = \"INTEGER\",  81 |       \"calmonth\" = \"INTEGER\",  82 |       \"calyearmonth\" = \"TEXT\",  83 |   84 |       \"date\" = \"DATE\",  85 |   86 |       \"temp_max\" = \"DOUBLE\",  87 |       \"temp_min\" = \"DOUBLE\",  88 |       \"precip\" = \"DOUBLE\"  89 |     ),  90 |     keys = c(  91 |       \"granularity_time\",  92 |       \"location_code\",  93 |       \"date\",  94 |       \"age\",  95 |       \"sex\"  96 |     ),  97 |     validator_field_types = csdb::validator_field_types_csfmt_rts_data_v1,  98 |     validator_field_contents = csdb::validator_field_contents_csfmt_rts_data_v1  99 |   ) 100 |  101 |   ## > anon_example_weather_data ---- 102 |   global$ss$add_table( 103 |     name_access = c(\"anon\"), 104 |     name_grouping = \"example_weather\", 105 |     name_variant = \"data\", 106 |     field_types =  c( 107 |       \"granularity_time\" = \"TEXT\", 108 |       \"granularity_geo\" = \"TEXT\", 109 |       \"country_iso3\" = \"TEXT\", 110 |       \"location_code\" = \"TEXT\", 111 |       \"border\" = \"INTEGER\", 112 |       \"age\" = \"TEXT\", 113 |       \"sex\" = \"TEXT\", 114 |  115 |       \"isoyear\" = \"INTEGER\", 116 |       \"isoweek\" = \"INTEGER\", 117 |       \"isoyearweek\" = \"TEXT\", 118 |       \"season\" = \"TEXT\", 119 |       \"seasonweek\" = \"DOUBLE\", 120 |  121 |       \"calyear\" = \"INTEGER\", 122 |       \"calmonth\" = \"INTEGER\", 123 |       \"calyearmonth\" = \"TEXT\", 124 |  125 |       \"date\" = \"DATE\", 126 |  127 |       \"temp_max\" = \"DOUBLE\", 128 |       \"temp_min\" = \"DOUBLE\", 129 |       \"precip\" = \"DOUBLE\" 130 |     ), 131 |     keys = c( 132 |       \"granularity_time\", 133 |       \"location_code\", 134 |       \"date\", 135 |       \"age\", 136 |       \"sex\" 137 |     ), 138 |     validator_field_types = csdb::validator_field_types_csfmt_rts_data_v1, 139 |     validator_field_contents = csdb::validator_field_contents_csfmt_rts_data_v1 140 |   ) 141 |  142 |   ## > anon_example_income ---- 143 |   global$ss$add_table( 144 |     name_access = c(\"anon\"), 145 |     name_grouping = \"example_income\", 146 |     name_variant = NULL, 147 |     field_types =  c( 148 |       \"granularity_time\" = \"TEXT\", 149 |       \"granularity_geo\" = \"TEXT\", 150 |       \"country_iso3\" = \"TEXT\", 151 |       \"location_code\" = \"TEXT\", 152 |       \"border\" = \"INTEGER\", 153 |       \"age\" = \"TEXT\", 154 |       \"sex\" = \"TEXT\", 155 |  156 |       \"isoyear\" = \"INTEGER\", 157 |       \"isoweek\" = \"INTEGER\", 158 |       \"isoyearweek\" = \"TEXT\", 159 |       \"season\" = \"TEXT\", 160 |       \"seasonweek\" = \"DOUBLE\", 161 |  162 |       \"calyear\" = \"INTEGER\", 163 |       \"calmonth\" = \"INTEGER\", 164 |       \"calyearmonth\" = \"TEXT\", 165 |  166 |       \"date\" = \"DATE\", 167 |  168 |       \"household_income_median_all_households_nok\" = \"DOUBLE\", 169 |       \"household_income_median_singles_nok\" = \"DOUBLE\", 170 |       \"household_income_median_couples_without_children_nok\" = \"DOUBLE\", 171 |       \"household_income_median_couples_with_children_nok\" = \"DOUBLE\", 172 |       \"household_income_median_single_with_children_nok\" = \"DOUBLE\" 173 |     ), 174 |     keys = c( 175 |       \"granularity_time\", 176 |       \"location_code\", 177 |       \"date\", 178 |       \"age\", 179 |       \"sex\" 180 |     ), 181 |     validator_field_types = csdb::validator_field_types_csfmt_rts_data_v1, 182 |     validator_field_contents = csdb::validator_field_contents_csfmt_rts_data_v1 183 |   ) 184 | }"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"tasks-r","dir":"Articles","previous_headings":"","what":"04_tasks.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/04_tasks.R","code":"https://github.com/csids/cs9example/blob/main/R/04_tasks.R    1 | # ******************************************************************************   2 | # ******************************************************************************   3 | #   4 | # 04_tasks.R   5 | #   6 | # PURPOSE 1:   7 | #   Set all the tasks that are run by the package.   8 | #   9 | #   These are basically all of the \"things\" that you want to do.  10 | #   E.g. Downloading data, cleaning data, importing data, analyzing data,  11 | #   making Excel files, making docx/pdf reports, sending emails, etc.  12 | #  13 | # ******************************************************************************  14 | # ******************************************************************************  15 |   16 | set_tasks <- function() {  17 |   # __________ ----  18 |   # Covid-19  ----  19 |   ## > covid19_import_data ----  20 |   # tm_run_task(\"covid19_import_data\")  21 |   global$ss$add_task(  22 |     name_grouping = \"covid19\",  23 |     name_action = \"import_data\",  24 |     name_variant = NULL,  25 |     cores = 1,  26 |     plan_analysis_fn_name = NULL,  27 |     for_each_plan = plnr::expand_list(  28 |       x = 1  29 |     ),  30 |     for_each_analysis = NULL,  31 |     universal_argset = NULL,  32 |     upsert_at_end_of_each_plan = FALSE,  33 |     insert_at_end_of_each_plan = FALSE,  34 |     action_fn_name = \"cs9example::covid19_import_data_action\",  35 |     data_selector_fn_name = \"cs9example::covid19_import_data_data_selector\",  36 |     tables = list(  37 |       # input  38 |   39 |       # output  40 |       \"anon_covid19_data\" = global$ss$tables$anon_covid19_data  41 |     )  42 |   )  43 |   44 |   # __________ ----  45 |   # Weather  ----  46 |   ## > weather_download_and_import_rawdata ----  47 |   # tm_run_task(\"weather_download_and_import_rawdata\")  48 |   global$ss$add_task(  49 |     name_grouping = \"weather\",  50 |     name_action = \"download_and_import_rawdata\",  51 |     name_variant = NULL,  52 |     cores = 1,  53 |     plan_analysis_fn_name = NULL,  54 |     for_each_plan = plnr::expand_list(  55 |       location_code = fhidata::norway_locations_names()[granularity_geo %in% c(\"municip\")]$location_code  56 |     ),  57 |     for_each_analysis = NULL,  58 |     universal_argset = NULL,  59 |     upsert_at_end_of_each_plan = FALSE,  60 |     insert_at_end_of_each_plan = FALSE,  61 |     action_fn_name = \"cs9example::weather_download_and_import_rawdata_action\",  62 |     data_selector_fn_name = \"cs9example::weather_download_and_import_rawdata_data_selector\",  63 |     tables = list(  64 |       # input  65 |   66 |       # output  67 |       \"anon_example_weather_rawdata\" = global$ss$tables$anon_example_weather_rawdata  68 |     )  69 |   )  70 |   71 |   ## > weather_clean_data ----  72 |   # tm_run_task(\"weather_clean_data\")  73 |   global$ss$add_task(  74 |     name_grouping = \"weather\",  75 |     name_action = \"clean_data\",  76 |     name_variant = NULL,  77 |     cores = 1,  78 |     plan_analysis_fn_name = NULL,  79 |     for_each_plan = plnr::expand_list(  80 |       x = 1  81 |     ),  82 |     for_each_analysis = NULL,  83 |     universal_argset = NULL,  84 |     upsert_at_end_of_each_plan = FALSE,  85 |     insert_at_end_of_each_plan = FALSE,  86 |     action_fn_name = \"cs9example::weather_clean_data_action\",  87 |     data_selector_fn_name = \"cs9example::weather_clean_data_data_selector\",  88 |     tables = list(  89 |       # input  90 |       \"anon_example_weather_rawdata\" = global$ss$tables$anon_example_weather_rawdata,  91 |   92 |       # output  93 |       \"anon_example_weather_data\" = global$ss$tables$anon_example_weather_data  94 |     )  95 |   )  96 |   97 |   ## > weather_clean_data ----  98 |   # tm_run_task(\"weather_export_plots\")  99 |   global$ss$add_task( 100 |     name_grouping = \"weather\", 101 |     name_action = \"export_plots\", 102 |     name_variant = NULL, 103 |     cores = 1, 104 |     plan_analysis_fn_name = NULL, 105 |     for_each_plan = plnr::expand_list( 106 |       location_code = fhidata::norway_locations_names()[granularity_geo %in% c(\"county\")]$location_code 107 |     ), 108 |     for_each_analysis = NULL, 109 |     universal_argset = list( 110 |       output_dir = tempdir(), 111 |       output_filename = \"weather_{argset$location_code}.png\", 112 |       output_absolute_path = fs::path(\"{argset$output_dir}\", \"{argset$output_filename}\") 113 |     ), 114 |     upsert_at_end_of_each_plan = FALSE, 115 |     insert_at_end_of_each_plan = FALSE, 116 |     action_fn_name = \"cs9example::weather_export_plots_action\", 117 |     data_selector_fn_name = \"cs9example::weather_export_plots_data_selector\", 118 |     tables = list( 119 |       # input 120 |       \"anon_example_weather_data\" = global$ss$tables$anon_example_weather_data 121 |  122 |       # output 123 |     ) 124 |   ) 125 | }"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"deliverables-r","dir":"Articles","previous_headings":"","what":"05_deliverables.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/05_deliverables.R","code":"https://github.com/csids/cs9example/blob/main/R/05_deliverables.R   1 | # ******************************************************************************  2 | # ******************************************************************************  3 | #  4 | # 05_deliverables.R  5 | #  6 | # PURPOSE 1:  7 | #   Set all the deliverables that team members are supposed to manually do/check  8 | #   every day/week/month.  9 | # 10 | # ****************************************************************************** 11 | # ****************************************************************************** 12 |  13 | set_deliverables <- function() { 14 |  15 | }"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"onload-r","dir":"Articles","previous_headings":"","what":"10_onLoad.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/10_onLoad.R","code":"https://github.com/csids/cs9example/blob/main/R/10_onLoad.R   1 | # ******************************************************************************  2 | # ******************************************************************************  3 | #  4 | # 10_onLoad.R  5 | #  6 | # PURPOSE 1:  7 | #   Initializing everything that happens when the package is loaded.  8 | #  9 | #   E.g. Calling bash scripts that authenticate against Kerebros, setting the 10 | #   configs. 11 | # 12 | # ****************************************************************************** 13 | # ****************************************************************************** 14 |  15 | .onLoad <- function(libname, pkgname) { 16 |   # Mechanism to authenticate as necessary (e.g. Kerebros) 17 |   if (file.exists(\"/bin/authenticate.sh\")) { 18 |     try(system2(\"/bin/authenticate.sh\", stdout = NULL), TRUE) 19 |   } 20 |  21 |   # 01_definitions.R 22 |   set_definitions() 23 |  24 |   # 02_surveillance_systems.R 25 |   set_surveillance_systems() 26 |  27 |   # 03_db_schemas.R 28 |   set_db_tables() 29 |  30 |   # 04_tasks.R 31 |   set_tasks() 32 |  33 |   # 05_deliverables.R 34 |   # set_deliverables() 35 |  36 |   # Formatting for progress bars. 37 |   progressr::handlers(progressr::handler_progress( 38 |     format = \"[:bar] :current/:total (:percent) in :elapsedfull, eta: :eta\", 39 |     clear = FALSE 40 |   )) 41 |  42 |   # https://github.com/rstudio/rmarkdown/issues/1632 43 |   assignInNamespace(\"clean_tmpfiles\", clean_tmpfiles_mod, ns = \"rmarkdown\") 44 |  45 |   invisible() 46 | }"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"onattach-r","dir":"Articles","previous_headings":"","what":"11_onAttach.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/11_onAttach.R","code":"https://github.com/csids/cs9example/blob/main/R/11_onAttach.R   1 | # ******************************************************************************  2 | # ******************************************************************************  3 | #  4 | # 11_onAttach.R  5 | #  6 | # PURPOSE 1:  7 | #   What you want to happen when someone types library(yourpackage)  8 | #  9 | # ****************************************************************************** 10 | # ****************************************************************************** 11 |  12 | .onAttach <- function(libname, pkgname) { 13 |   version <- tryCatch( 14 |     utils::packageDescription(\"cs9example\", fields = \"Version\"), 15 |     warning = function(w){ 16 |       1 17 |     } 18 |   ) 19 |  20 |   packageStartupMessage(paste0(\"cs9example \",version)) 21 |   packageStartupMessage(paste0(\"cs9 \",utils::packageDescription(\"cs9\", fields = \"Version\"))) 22 | }"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"task-files","dir":"Articles","previous_headings":"","what":"Task files","title":"File Layout","text":"Task files placed .R files names.","code":""},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"weather_download_and_import_rawdata-r","dir":"Articles","previous_headings":"Task files","what":"weather_download_and_import_rawdata.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/weather_download_and_import_rawdata.R","code":"https://github.com/csids/cs9example/blob/main/R/weather_download_and_import_rawdata.R    1 | # **** action **** ----   2 | #' weather_download_and_import_rawdata (action)   3 | #' @param data Data   4 | #' @param argset Argset   5 | #' @param tables DB tables   6 | #' @export   7 | weather_download_and_import_rawdata_action <- function(data, argset, tables) {   8 |   # cs9::run_task_sequentially_as_rstudio_job_using_load_all(\"weather_download_and_import_rawdata\")   9 |   # To be run outside of rstudio: cs9example::global$ss$run_task(\"weather_download_and_import_rawdata\")  10 |   11 |   if (plnr::is_run_directly()) {  12 |     # global$ss$shortcut_get_plans_argsets_as_dt(\"weather_download_and_import_rawdata\")  13 |   14 |     index_plan <- 1  15 |     index_analysis <- 1  16 |   17 |     data <- global$ss$shortcut_get_data(\"weather_download_and_import_rawdata\", index_plan = index_plan)  18 |     argset <- global$ss$shortcut_get_argset(\"weather_download_and_import_rawdata\", index_plan = index_plan, index_analysis = index_analysis)  19 |     tables <- global$ss$shortcut_get_tables(\"weather_download_and_import_rawdata\")  20 |   }  21 |   22 |   # special case that runs before everything  23 |   if (argset$first_analysis == TRUE) {  24 |   25 |   }  26 |   27 |   a <- data$data$properties$timeseries  28 |   res <- vector(\"list\", length=length(a) - 1)  29 |   for(i in seq_along(res)){  30 |     # i = 1  31 |     time_from <- a[[i]]$time  32 |     if(\"next_1_hours\" %in% names(a[[i]]$data)){  33 |       time_var <- \"next_1_hours\"  34 |     } else {  35 |       time_var <- \"next_6_hours\"  36 |     }  37 |     temp <- a[[i]]$data[[\"instant\"]]$details$air_temperature  38 |     precip <- a[[i]]$data[[time_var]]$details$precipitation_amount  39 |   40 |     res[[i]] <- data.frame(  41 |       time_from = as.character(time_from),  42 |       temp = as.numeric(temp),  43 |       precip = as.numeric(precip)  44 |     )  45 |   }  46 |   47 |   res <- rbindlist(res)  48 |   res <- res[stringr::str_sub(time_from, 12, 13) %in% c(\"00\", \"06\", \"12\", \"18\")]  49 |   res[, date := as.Date(stringr::str_sub(time_from, 1, 10))]  50 |   res <- res[  51 |     ,  52 |     .(  53 |       temp_max = max(temp),  54 |       temp_min = min(temp),  55 |       precip = sum(precip)  56 |     ),  57 |     keyby = .(date)  58 |   ]  59 |   60 |   # we look at the downloaded data  61 |   # res  62 |   63 |   # we now need to format it  64 |   res[, granularity_time := \"day\"]  65 |   res[, sex := \"total\"]  66 |   res[, age := \"total\"]  67 |   res[, location_code := argset$location_code]  68 |   res[, border := global$border]  69 |   70 |   # fill in missing structural variables  71 |   cstidy::set_csfmt_rts_data_v1(res)  72 |   73 |   # we look at the downloaded data  74 |   # res  75 |   76 |   # put data in db table  77 |   tables$anon_example_weather_rawdata$upsert_data(res)  78 |   79 |   # special case that runs after everything  80 |   if (argset$last_analysis == TRUE) {  81 |   82 |   }  83 | }  84 |   85 | # **** data_selector **** ----  86 | #' weather_download_and_import_rawdata (data selector)  87 | #' @param argset Argset  88 | #' @param tables DB tables  89 | #' @export  90 | weather_download_and_import_rawdata_data_selector <- function(argset, tables) {  91 |   if (plnr::is_run_directly()) {  92 |     # sc::tm_get_plans_argsets_as_dt(\"weather_download_and_import_rawdata\")  93 |   94 |     index_plan <- 1  95 |   96 |     argset <- global$ss$shortcut_get_argset(\"weather_download_and_import_rawdata\", index_plan = index_plan)  97 |     tables <- global$ss$shortcut_get_tables(\"weather_download_and_import_rawdata\")  98 |   }  99 |  100 |   # find the mid lat/long for the specified location_code 101 |   gps <- fhimaps::norway_lau2_map_b2020_default_dt[location_code == argset$location_code,.( 102 |     lat = mean(lat), 103 |     long = mean(long) 104 |   )] 105 |  106 |   # download the forecast for the specified location_code 107 |   d <- httr::GET(glue::glue(\"https://api.met.no/weatherapi/locationforecast/2.0/complete?lat={gps$lat}&lon={gps$long}\")) 108 |   d <- httr::content(d) 109 |  110 |   # The variable returned must be a named list 111 |   retval <- list( 112 |     \"data\" = d 113 |   ) 114 |  115 |   retval 116 | } 117 |  118 | # **** functions **** ----"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"weather_clean_data-r","dir":"Articles","previous_headings":"Task files","what":"weather_clean_data.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/weather_clean_data.R","code":"https://github.com/csids/cs9example/blob/main/R/weather_clean_data.R    1 | # **** action **** ----   2 | #' weather_clean_data (action)   3 | #' @param data Data   4 | #' @param argset Argset   5 | #' @param tables DB tables   6 | #' @export   7 | weather_clean_data_action <- function(data, argset, tables) {   8 |   # cs9::run_task_sequentially_as_rstudio_job_using_load_all(\"weather_clean_data\")   9 |   # To be run outside of rstudio: cs9example::global$ss$run_task(\"weather_clean_data\")  10 |   11 |   12 |   if (plnr::is_run_directly()) {  13 |     # global$ss$shortcut_get_plans_argsets_as_dt(\"weather_clean_data\")  14 |   15 |     index_plan <- 1  16 |     index_analysis <- 1  17 |   18 |     data <- global$ss$shortcut_get_data(\"weather_clean_data\", index_plan = index_plan)  19 |     argset <- global$ss$shortcut_get_argset(\"weather_clean_data\", index_plan = index_plan, index_analysis = index_analysis)  20 |     tables <- global$ss$shortcut_get_tables(\"weather_clean_data\")  21 |   }  22 |   23 |   # special case that runs before everything  24 |   if (argset$first_analysis == TRUE) {  25 |   26 |   }  27 |   28 |   # make sure there's no missing data via the creation of a skeleton  29 |   # https://folkehelseinstituttet.github.io/fhidata/articles/Skeletons.html  30 |   31 |   # Create a variable (possibly a list) to hold the data  32 |   d_agg <- list()  33 |   d_agg$day_municip <- copy(data$day_municip)  34 |   35 |   # Pull out important dates  36 |   date_min <- min(d_agg$day_municip$date, na.rm = T)  37 |   date_max <- max(d_agg$day_municip$date, na.rm = T)  38 |   39 |   # Create `multiskeleton`  40 |   # granularity_geo should have the following groups:  41 |   # - nodata (when no data is available, and there is no \"finer\" data available to aggregate up)  42 |   # - all levels of granularity_geo where you have data available  43 |   # If you do not have data for a specific granularity_geo, but there is \"finer\" data available  44 |   # then you should not include this granularity_geo in the multiskeleton, because you will create  45 |   # it later when you aggregate up your data (baregion)  46 |   multiskeleton_day <- fhidata::make_skeleton(  47 |     date_min = date_min,  48 |     date_max = date_max,  49 |     granularity_geo = list(  50 |       \"nodata\" = c(  51 |         \"wardoslo\",  52 |         \"extrawardoslo\",  53 |         \"missingwardoslo\",  54 |         \"wardbergen\",  55 |         \"missingwardbergen\",  56 |         \"wardstavanger\",  57 |         \"missingwardstavanger\",  58 |         \"notmainlandmunicip\",  59 |         \"missingmunicip\",  60 |         \"notmainlandcounty\",  61 |         \"missingcounty\"  62 |       ),  63 |       \"municip\" = c(  64 |         \"municip\"  65 |       )  66 |     )  67 |   )  68 |   69 |   # Merge in the information you have at different geographical granularities  70 |   # one level at a time  71 |   # municip  72 |   multiskeleton_day$municip[  73 |     d_agg$day_municip,  74 |     on = c(\"location_code\", \"date\"),  75 |     c(  76 |       \"temp_max\",  77 |       \"temp_min\",  78 |       \"precip\"  79 |     ) := .(  80 |       temp_max,  81 |       temp_min,  82 |       precip  83 |     )  84 |   ]  85 |   86 |   multiskeleton_day$municip[]  87 |   88 |   # Aggregate up to higher geographical granularities (county)  89 |   multiskeleton_day$county <- multiskeleton_day$municip[  90 |     fhidata::norway_locations_hierarchy(  91 |       from = \"municip\",  92 |       to = \"county\"  93 |     ),  94 |     on = c(  95 |       \"location_code==from_code\"  96 |     )  97 |   ][,  98 |     .(  99 |       temp_max = mean(temp_max, na.rm = T), 100 |       temp_min = mean(temp_min, na.rm = T), 101 |       precip = mean(precip, na.rm = T), 102 |       granularity_geo = \"county\" 103 |     ), 104 |     by = .( 105 |       granularity_time, 106 |       date, 107 |       location_code = to_code 108 |     ) 109 |   ] 110 |  111 |   multiskeleton_day$county[] 112 |  113 |   # Aggregate up to higher geographical granularities (nation) 114 |   multiskeleton_day$nation <- multiskeleton_day$municip[ 115 |     , 116 |     .( 117 |       temp_max = mean(temp_max, na.rm = T), 118 |       temp_min = mean(temp_min, na.rm = T), 119 |       precip = mean(precip, na.rm = T), 120 |       granularity_geo = \"nation\", 121 |       location_code = \"norge\" 122 |     ), 123 |     by = .( 124 |       granularity_time, 125 |       date 126 |     ) 127 |   ] 128 |  129 |   multiskeleton_day$nation[] 130 |  131 |   # combine all the different granularity_geos 132 |   skeleton_day <- rbindlist(multiskeleton_day, fill = TRUE, use.names = TRUE) 133 |  134 |   skeleton_day[] 135 |  136 |   # 10. (If desirable) aggregate up to higher time granularities 137 |   # if necessary, it is now easy to aggregate up to weekly data from here 138 |   skeleton_isoweek <- copy(skeleton_day) 139 |   skeleton_isoweek[, isoyearweek := fhiplot::isoyearweek_c(date)] 140 |   skeleton_isoweek <- skeleton_isoweek[ 141 |     , 142 |     .( 143 |       temp_max = mean(temp_max, na.rm = T), 144 |       temp_min = mean(temp_min, na.rm = T), 145 |       precip = mean(precip, na.rm = T), 146 |       granularity_time = \"isoweek\" 147 |     ), 148 |     keyby = .( 149 |       isoyearweek, 150 |       granularity_geo, 151 |       location_code 152 |     ) 153 |   ] 154 |  155 |   skeleton_isoweek[] 156 |  157 |   # we now need to format it and fill in missing structural variables 158 |   # day 159 |   skeleton_day[, sex := \"total\"] 160 |   skeleton_day[, age := \"total\"] 161 |   skeleton_day[, border := global$border] 162 |   cstidy::set_csfmt_rts_data_v1(skeleton_day) 163 |  164 |   # isoweek 165 |   skeleton_isoweek[, sex := \"total\"] 166 |   skeleton_isoweek[, age := \"total\"] 167 |   skeleton_isoweek[, border := global$border] 168 |   cstidy::set_csfmt_rts_data_v1(skeleton_isoweek) 169 |  170 |   skeleton <- rbindlist( 171 |     list( 172 |       skeleton_day, 173 |       skeleton_isoweek 174 |     ), 175 |     use.names = T 176 |   ) 177 |  178 |   # put data in db table 179 |   tables$anon_example_weather_data$drop_all_rows_and_then_insert_data(skeleton) 180 |  181 |   # special case that runs after everything 182 |   if (argset$last_analysis == TRUE) { 183 |  184 |   } 185 | } 186 |  187 | # **** data_selector **** ---- 188 | #' weather_clean_data (data selector) 189 | #' @param argset Argset 190 | #' @param tables DB tables 191 | #' @export 192 | weather_clean_data_data_selector <- function(argset, tables) { 193 |   if (plnr::is_run_directly()) { 194 |     # global$ss$shortcut_get_plans_argsets_as_dt(\"weather_clean_data\") 195 |  196 |     index_plan <- 1 197 |  198 |     argset <- global$ss$shortcut_get_argset(\"weather_clean_data\", index_plan = index_plan) 199 |     tables <- global$ss$shortcut_get_tables(\"weather_clean_data\") 200 |   } 201 |  202 |   # The database tabless can be accessed here 203 |   d <- tables$anon_example_weather_rawdata$tbl() %>% 204 |     cs9::mandatory_db_filter( 205 |       granularity_time = \"day\", 206 |       granularity_time_not = NULL, 207 |       granularity_geo = \"municip\", 208 |       granularity_geo_not = NULL, 209 |       country_iso3 = NULL, 210 |       location_code = NULL, 211 |       age = \"total\", 212 |       age_not = NULL, 213 |       sex = \"total\", 214 |       sex_not = NULL 215 |     ) %>% 216 |     dplyr::select( 217 |       granularity_time, 218 |       # granularity_geo, 219 |       # country_iso3, 220 |       location_code, 221 |       # border, 222 |       # age, 223 |       # sex, 224 |  225 |       date, 226 |  227 |       # isoyear, 228 |       # isoweek, 229 |       # isoyearweek, 230 |       # season, 231 |       # seasonweek, 232 |  233 |       # calyear, 234 |       # calmonth, 235 |       # calyearmonth, 236 |  237 |       temp_max, 238 |       temp_min, 239 |       precip 240 |     ) %>% 241 |     dplyr::collect() %>% 242 |     as.data.table() %>% 243 |     setorder( 244 |       location_code, 245 |       date 246 |     ) 247 |  248 |   # The variable returned must be a named list 249 |   retval <- list( 250 |     \"day_municip\" = d 251 |   ) 252 |  253 |   retval 254 | } 255 |  256 | # **** functions **** ----"},{"path":"https://www.csids.no/cs9/articles/file-layout.html","id":"weather_export_weather_plots-r","dir":"Articles","previous_headings":"Task files","what":"weather_export_weather_plots.R","title":"File Layout","text":"https://github.com/csids/cs9example/blob/main/R/weather_export_plots.R","code":"https://github.com/csids/cs9example/blob/main/R/weather_export_plots.R    1 | # **** action **** ----   2 | #' weather_export_plots (action)   3 | #' @param data Data   4 | #' @param argset Argset   5 | #' @param tables DB tables   6 | #' @export   7 | weather_export_plots_action <- function(data, argset, tables) {   8 |   # cs9::run_task_sequentially_as_rstudio_job_using_load_all(\"weather_export_plots\")   9 |   # To be run outside of rstudio: cs9example::global$ss$run_task(\"weather_export_plots\")  10 |   11 |   if(plnr::is_run_directly()){  12 |     # global$ss$shortcut_get_plans_argsets_as_dt(\"weather_export_plots\")  13 |   14 |     index_plan <- 1  15 |     index_analysis <- 1  16 |   17 |     data <- global$ss$shortcut_get_data(\"weather_export_plots\", index_plan = index_plan)  18 |     argset <- global$ss$shortcut_get_argset(\"weather_export_plots\", index_plan = index_plan, index_analysis = index_analysis)  19 |     tables <- global$ss$shortcut_get_tables(\"weather_export_plots\")  20 |   }  21 |   22 |   # code goes here  23 |   # special case that runs before everything  24 |   if(argset$first_analysis == TRUE){  25 |   26 |   }  27 |   28 |   # create the output_dir (if it doesn't exist)  29 |   fs::dir_create(glue::glue(argset$output_dir))  30 |   31 |   q <- ggplot(data$data, aes(x = date, ymin = temp_min, ymax = temp_max))  32 |   q <- q + geom_ribbon(alpha = 0.5)  33 |   34 |   ggsave(  35 |     filename = glue::glue(argset$output_absolute_path),  36 |     plot = q  37 |   )  38 |   39 |   # special case that runs after everything  40 |   # copy to anon_web?  41 |   if(argset$last_analysis == TRUE){  42 |   43 |   }  44 | }  45 |   46 | # **** data_selector **** ----  47 | #' weather_export_plots (data selector)  48 | #' @param argset Argset  49 | #' @param tables DB tables  50 | #' @export  51 | weather_export_plots_data_selector = function(argset, tables){  52 |   if(plnr::is_run_directly()){  53 |     # global$ss$shortcut_get_plans_argsets_as_dt(\"weather_export_plots\")  54 |   55 |     index_plan <- 1  56 |   57 |     argset <- global$ss$shortcut_get_argset(\"weather_export_plots\", index_plan = index_plan, index_analysis = index_analysis)  58 |     tables <- global$ss$shortcut_get_tables(\"weather_export_plots\")  59 |   }  60 |   61 |   # The database tables can be accessed here  62 |   d <- tables$anon_example_weather_data$tbl() %>%  63 |     cs9::mandatory_db_filter(  64 |       granularity_time = NULL,  65 |       granularity_time_not = NULL,  66 |       granularity_geo = NULL,  67 |       granularity_geo_not = NULL,  68 |       country_iso3 = NULL,  69 |       location_code = argset$location_code,  70 |       age = NULL,  71 |       age_not = NULL,  72 |       sex = NULL,  73 |       sex_not = NULL  74 |     ) %>%  75 |     dplyr::select(  76 |       # granularity_time,  77 |       # granularity_geo,  78 |       # country_iso3,  79 |       # location_code,  80 |       # border,  81 |       # age,  82 |       # sex,  83 |   84 |       date,  85 |   86 |       # isoyear,  87 |       # isoweek,  88 |       # isoyearweek,  89 |       # season,  90 |       # seasonweek,  91 |       #  92 |       # calyear,  93 |       # calmonth,  94 |       # calyearmonth,  95 |   96 |       temp_max,  97 |       temp_min  98 |     ) %>%  99 |     dplyr::collect() %>% 100 |     as.data.table() %>% 101 |     setorder( 102 |       # location_code, 103 |       date 104 |     ) 105 |  106 |   # The variable returned must be a named list 107 |   retval <- list( 108 |     \"data\" = d 109 |   ) 110 |   retval 111 | } 112 |  113 | # **** functions **** ---- 114 |  115 |  116 |  117 |"},{"path":"https://www.csids.no/cs9/articles/installation.html","id":"databases","dir":"Articles","previous_headings":"","what":"Databases","title":"Installation","text":"Currently cs9 works MSSQL databases.","code":""},{"path":"https://www.csids.no/cs9/articles/installation.html","id":"environmental-variables","dir":"Articles","previous_headings":"","what":"Environmental variables","title":"Installation","text":"following environmental variables must available within R. R loads limited amount environmental variables default, make sure environmental variables located Renviron file.","code":""},{"path":"https://www.csids.no/cs9/articles/installation.html","id":"docker","dir":"Articles","previous_headings":"","what":"Docker","title":"Installation","text":"example docker-compose file available .","code":""},{"path":"https://www.csids.no/cs9/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package proudly brought : Richard Aubrey White. Author, maintainer. . Copyright holder. See changelog contributors. 🙏","code":""},{"path":"https://www.csids.no/cs9/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"White RA (2024). cs9: Framework Real-time Analysis Disease Surveillance. R package version 2024.6.19, https://github.com/csids/cs9, https://www.csids./cs9/.","code":"@Manual{,   title = {cs9: A Framework for Real-time Analysis and Disease Surveillance},   author = {Richard Aubrey White},   year = {2024},   note = {R package version 2024.6.19, https://github.com/csids/cs9},   url = {https://www.csids.no/cs9/}, }"},{"path":[]},{"path":"https://www.csids.no/cs9/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Framework for Real-time Analysis and Disease Surveillance","text":"Core Surveillance 9 (“cs9”) free open-source framework real-time analysis disease surveillance. Read introduction vignette run help(package=\"cs9\").","code":""},{"path":"https://www.csids.no/cs9/index.html","id":"csverse","dir":"","previous_headings":"","what":"csverse","title":"A Framework for Real-time Analysis and Disease Surveillance","text":"csverse set R packages developed help solve problems frequently occur performing disease surveillance. want install dev versions (access packages haven’t released CRAN), run usethis::edit_r_profile() edit .Rprofile. write : Save file restart R. can now install csverse packages drat repository.","code":"options(   repos = structure(c(     CSVERSE = \"https://www.csids.no/drat/\",     CRAN    = \"https://cran.rstudio.com\"   )) ) install.packages(\"cs9\")"},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":null,"dir":"Reference","previous_headings":"","what":"A Surveillance System Object — SurveillanceSystem_v9","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"abstract class holds entire surveillance system.","code":""},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"SurveillanceSystem_v9$new() SurveillanceSystem_v9$add_table() SurveillanceSystem_v9$add_partitionedtable() SurveillanceSystem_v9$add_task() SurveillanceSystem_v9$get_task() SurveillanceSystem_v9$run_task() SurveillanceSystem_v9$shortcut_get_tables() SurveillanceSystem_v9$shortcut_get_argset() SurveillanceSystem_v9$shortcut_get_data() SurveillanceSystem_v9$shortcut_get_plans_argsets_as_dt() SurveillanceSystem_v9$shortcut_get_num_analyses() SurveillanceSystem_v9$clone()","code":""},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$new(implementation_version = \"unspecified\")"},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"implementation_version string user may choose use track performance metrics (runtime RAM usage)","code":""},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"method-add-table-","dir":"Reference","previous_headings":"","what":"Method add_table()","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"Add table","code":""},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$add_table(   name_access,   name_grouping = NULL,   name_variant = NULL,   field_types,   keys,   indexes = NULL,   validator_field_types = csdb::validator_field_types_blank,   validator_field_contents = csdb::validator_field_contents_blank )"},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"name_access First part table name, corresponding database stored. name_grouping Second part table name, corresponding sort grouping. name_variant Final part table name, corresponding distinguishing variant. field_types Named character vector, names column names, values column types. Valid types BOOLEAN, CHARACTER, INTEGER, DOUBLE, DATE, DATETIME keys Character vector, containing column names uniquely identify row data. indexes Named list, containing indexes. validator_field_types Function corresponding validator field types. validator_field_contents Function corresponding validator field contents.","code":""},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"\\dontrun{ global$ss$add_table(   name_access = c(\"anon\"),   name_grouping = \"example_weather\",   name_variant = \"data\",   field_types =  c(     \"granularity_time\" = \"TEXT\",     \"granularity_geo\" = \"TEXT\",     \"country_iso3\" = \"TEXT\",     \"location_code\" = \"TEXT\",     \"border\" = \"INTEGER\",     \"age\" = \"TEXT\",     \"sex\" = \"TEXT\",      \"isoyear\" = \"INTEGER\",     \"isoweek\" = \"INTEGER\",     \"isoyearweek\" = \"TEXT\",     \"season\" = \"TEXT\",     \"seasonweek\" = \"DOUBLE\",      \"calyear\" = \"INTEGER\",     \"calmonth\" = \"INTEGER\",     \"calyearmonth\" = \"TEXT\",      \"date\" = \"DATE\",      \"temp_max\" = \"DOUBLE\",     \"temp_min\" = \"DOUBLE\",     \"precip\" = \"DOUBLE\"   ),   keys = c(     \"granularity_time\",     \"location_code\",     \"date\",     \"age\",     \"sex\"   ),   validator_field_types = csdb::validator_field_types_csfmt_rts_data_v1,   validator_field_contents = csdb::validator_field_contents_csfmt_rts_data_v1 ) }"},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$add_partitionedtable(   name_access,   name_grouping = NULL,   name_variant = NULL,   name_partitions = \"default\",   column_name_partition = \"partition\",   value_generator_partition = NULL,   field_types,   keys,   indexes = NULL,   validator_field_types = csdb::validator_field_types_blank,   validator_field_contents = csdb::validator_field_contents_blank )"},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"method-add-task-","dir":"Reference","previous_headings":"","what":"Method add_task()","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"add_task_from_config","code":""},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$add_task(   name_grouping = NULL,   name_action = NULL,   name_variant = NULL,   cores = 1,   permission = NULL,   plan_analysis_fn_name = NULL,   for_each_plan = NULL,   for_each_analysis = NULL,   universal_argset = NULL,   upsert_at_end_of_each_plan = FALSE,   insert_at_end_of_each_plan = FALSE,   action_fn_name,   data_selector_fn_name = NULL,   tables = NULL )"},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"name_grouping Name task (grouping) name_action Name task (action) name_variant Name task (variant) cores Number CPU cores permission permission R6 instance plan_analysis_fn_name name function returns named list list(for_each_plan = list(), for_each_analysis = NULL). for_each_plan list, unit corresponds one data extraction. Generally recommended use plnr::expand_list. for_each_analysis list, unit corresponds one analysis within plan (data extraction). Generally recommended use plnr::expand_list. universal_argset list, argsets applied analyses univerally upsert_at_end_of_each_plan want upsert results automatically end plan? insert_at_end_of_each_plan want insert results automatically end plan? action_fn_name name function called analysis arguments data, argset, schema data_selector_fn_name name function called obtain data analysis. function must arguments argset, schema must return named list. tables named list maps cs9::config$schemas use action_fn_name data_selector_fn_name","code":""},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$get_task(task_name)"},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$run_task(task_name)"},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$shortcut_get_tables(task_name)"},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$shortcut_get_argset(   task_name,   index_plan = 1,   index_analysis = 1 )"},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$shortcut_get_data(task_name, index_plan = 1)"},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$shortcut_get_plans_argsets_as_dt(task_name)"},{"path":[]},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$shortcut_get_num_analyses(task_name)"},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"objects class cloneable method.","code":""},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"SurveillanceSystem_v9$clone(deep = FALSE)"},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"deep Whether make deep clone.","code":""},{"path":"https://www.csids.no/cs9/reference/SurveillanceSystem_v9.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Surveillance System Object — SurveillanceSystem_v9","text":"","code":"## ------------------------------------------------ ## Method `SurveillanceSystem_v9$add_table` ## ------------------------------------------------  if (FALSE) { global$ss$add_table(   name_access = c(\"anon\"),   name_grouping = \"example_weather\",   name_variant = \"data\",   field_types =  c(     \"granularity_time\" = \"TEXT\",     \"granularity_geo\" = \"TEXT\",     \"country_iso3\" = \"TEXT\",     \"location_code\" = \"TEXT\",     \"border\" = \"INTEGER\",     \"age\" = \"TEXT\",     \"sex\" = \"TEXT\",      \"isoyear\" = \"INTEGER\",     \"isoweek\" = \"INTEGER\",     \"isoyearweek\" = \"TEXT\",     \"season\" = \"TEXT\",     \"seasonweek\" = \"DOUBLE\",      \"calyear\" = \"INTEGER\",     \"calmonth\" = \"INTEGER\",     \"calyearmonth\" = \"TEXT\",      \"date\" = \"DATE\",      \"temp_max\" = \"DOUBLE\",     \"temp_min\" = \"DOUBLE\",     \"precip\" = \"DOUBLE\"   ),   keys = c(     \"granularity_time\",     \"location_code\",     \"date\",     \"age\",     \"sex\"   ),   validator_field_types = csdb::validator_field_types_csfmt_rts_data_v1,   validator_field_contents = csdb::validator_field_contents_csfmt_rts_data_v1 ) }"},{"path":"https://www.csids.no/cs9/reference/collect.sc_tbl_v8.html","id":null,"dir":"Reference","previous_headings":"","what":"collect — collect.sc_tbl_v8","title":"collect — collect.sc_tbl_v8","text":"collect","code":""},{"path":"https://www.csids.no/cs9/reference/collect.sc_tbl_v8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"collect — collect.sc_tbl_v8","text":"","code":"# S3 method for sc_tbl_v8 collect(x, ...)"},{"path":"https://www.csids.no/cs9/reference/collect.sc_tbl_v8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"collect — collect.sc_tbl_v8","text":"x tbl object ... dots","code":""},{"path":"https://www.csids.no/cs9/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Flags/values to be used in the 'dashboards' scene — config","title":"Flags/values to be used in the 'dashboards' scene — config","text":"Flags/values used 'dashboards' scene","code":""},{"path":"https://www.csids.no/cs9/reference/config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flags/values to be used in the 'dashboards' scene — config","text":"","code":"config"},{"path":"https://www.csids.no/cs9/reference/config.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Flags/values to be used in the 'dashboards' scene — config","text":"object class environment length 7.","code":""},{"path":"https://www.csids.no/cs9/reference/create_folder_if_doesnt_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates folder if it doesn't exist — create_folder_if_doesnt_exist","title":"Creates folder if it doesn't exist — create_folder_if_doesnt_exist","text":"Creates folder exist","code":""},{"path":"https://www.csids.no/cs9/reference/create_folder_if_doesnt_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates folder if it doesn't exist — create_folder_if_doesnt_exist","text":"","code":"create_folder_if_doesnt_exist(path)"},{"path":"https://www.csids.no/cs9/reference/create_folder_if_doesnt_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates folder if it doesn't exist — create_folder_if_doesnt_exist","text":"path path","code":""},{"path":"https://www.csids.no/cs9/reference/create_latest_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Create latest folder — create_latest_folder","title":"Create latest folder — create_latest_folder","text":"function copies results_folder/date til results_folder/latest","code":""},{"path":"https://www.csids.no/cs9/reference/create_latest_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create latest folder — create_latest_folder","text":"","code":"create_latest_folder(results_folder_name, date)"},{"path":"https://www.csids.no/cs9/reference/create_latest_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create latest folder — create_latest_folder","text":"results_folder_name name results folder date date extraction","code":""},{"path":"https://www.csids.no/cs9/reference/get_config_data_hash_for_each_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"get_config_data_hash_for_each_plan\nGets the config_data_hash_for_each_plan db table — get_config_data_hash_for_each_plan","title":"get_config_data_hash_for_each_plan\nGets the config_data_hash_for_each_plan db table — get_config_data_hash_for_each_plan","text":"get_config_data_hash_for_each_plan Gets config_data_hash_for_each_plan db table","code":""},{"path":"https://www.csids.no/cs9/reference/get_config_data_hash_for_each_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_config_data_hash_for_each_plan\nGets the config_data_hash_for_each_plan db table — get_config_data_hash_for_each_plan","text":"","code":"get_config_data_hash_for_each_plan(   task = NULL,   index_plan = NULL,   element_tag = NULL )"},{"path":"https://www.csids.no/cs9/reference/get_config_data_hash_for_each_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_config_data_hash_for_each_plan\nGets the config_data_hash_for_each_plan db table — get_config_data_hash_for_each_plan","text":"task index_plan element_tag ","code":""},{"path":"https://www.csids.no/cs9/reference/get_config_tables_last_updated.html","id":null,"dir":"Reference","previous_headings":"","what":"get_config_last_updated\nGets the config_last_updated db table — get_config_tables_last_updated","title":"get_config_last_updated\nGets the config_last_updated db table — get_config_tables_last_updated","text":"get_config_last_updated Gets config_last_updated db table","code":""},{"path":"https://www.csids.no/cs9/reference/get_config_tables_last_updated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_config_last_updated\nGets the config_last_updated db table — get_config_tables_last_updated","text":"","code":"get_config_tables_last_updated(table_name = NULL)"},{"path":"https://www.csids.no/cs9/reference/get_config_tables_last_updated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_config_last_updated\nGets the config_last_updated db table — get_config_tables_last_updated","text":"table_name Table name","code":""},{"path":"https://www.csids.no/cs9/reference/get_config_tasks_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"get_config_last_updated\nGets the config_last_updated db table — get_config_tasks_stats","title":"get_config_last_updated\nGets the config_last_updated db table — get_config_tasks_stats","text":"get_config_last_updated Gets config_last_updated db table","code":""},{"path":"https://www.csids.no/cs9/reference/get_config_tasks_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_config_last_updated\nGets the config_last_updated db table — get_config_tasks_stats","text":"","code":"get_config_tasks_stats(task = NULL, last_run = FALSE)"},{"path":"https://www.csids.no/cs9/reference/get_config_tasks_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_config_last_updated\nGets the config_last_updated db table — get_config_tasks_stats","text":"task Task name last_run Just get last run?","code":""},{"path":"https://www.csids.no/cs9/reference/mandatory_db_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"mandatory_db_filter — mandatory_db_filter","title":"mandatory_db_filter — mandatory_db_filter","text":"mandatory_db_filter","code":""},{"path":"https://www.csids.no/cs9/reference/mandatory_db_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mandatory_db_filter — mandatory_db_filter","text":"","code":"mandatory_db_filter(   .data,   granularity_time = NULL,   granularity_time_not = NULL,   granularity_geo = NULL,   granularity_geo_not = NULL,   country_iso3 = NULL,   location_code = NULL,   age = NULL,   age_not = NULL,   sex = NULL,   sex_not = NULL )"},{"path":"https://www.csids.no/cs9/reference/mandatory_db_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mandatory_db_filter — mandatory_db_filter","text":".data Data granularity_time Granularity time filter (include) granularity_time_not Granularity time filter (exclude) granularity_geo Granularity geo filter (include) granularity_geo_not Granularity geo filter (exclude) country_iso3 country_iso3 filter (include) location_code location_code filter (include) age Age filter (include) age_not Age filter (exclude) sex Sex filter (include) sex_not Sex filter (exclude)","code":""},{"path":"https://www.csids.no/cs9/reference/path.html","id":null,"dir":"Reference","previous_headings":"","what":"This function gets the right folder for results — path","title":"This function gets the right folder for results — path","text":"function gets right folder results","code":""},{"path":"https://www.csids.no/cs9/reference/path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function gets the right folder for results — path","text":"","code":"path(   ...,   create_dir = FALSE,   trailing_slash = FALSE,   auto = cs9::config$is_auto )"},{"path":"https://www.csids.no/cs9/reference/path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function gets the right folder for results — path","text":"... Second level beyond create_dir create directory exist trailing_slash want trailing /? auto running auto (base directory used) interactive (\"/interactive\")?","code":""},{"path":"https://www.csids.no/cs9/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"https://www.csids.no/cs9/reference/run_task_sequentially_as_rstudio_job_using_load_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a task sequentially as an RStudio job — run_task_sequentially_as_rstudio_job_using_load_all","title":"Run a task sequentially as an RStudio job — run_task_sequentially_as_rstudio_job_using_load_all","text":"Description","code":""},{"path":"https://www.csids.no/cs9/reference/run_task_sequentially_as_rstudio_job_using_load_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a task sequentially as an RStudio job — run_task_sequentially_as_rstudio_job_using_load_all","text":"","code":"run_task_sequentially_as_rstudio_job_using_load_all(   task_name,   ss_prefix = \"global$ss\" )"},{"path":"https://www.csids.no/cs9/reference/run_task_sequentially_as_rstudio_job_using_load_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a task sequentially as an RStudio job — run_task_sequentially_as_rstudio_job_using_load_all","text":"task_name Task name ss_prefix prefix locates surveillance system","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-2024617","dir":"Changelog","previous_headings":"","what":"Version 2024.6.17","title":"Version 2024.6.17","text":"running parallel, seed set according index first analysis plan.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202466","dir":"Changelog","previous_headings":"","what":"Version 2024.6.6","title":"Version 2024.6.6","text":"Partition table names now ‘xxxpartitionxxx’ ‘PARTITION’","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202437","dir":"Changelog","previous_headings":"","what":"Version 2024.3.7","title":"Version 2024.3.7","text":"Including confirm_insert_via_nrow DBtables. Checks nrow() insert insert. nrow() increased sufficiently, attempt upsert.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202381","dir":"Changelog","previous_headings":"","what":"Version 2023.8.1","title":"Version 2023.8.1","text":"cs9::path now uses _interactive instead interactive.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202353","dir":"Changelog","previous_headings":"","what":"Version 2023.5.3","title":"Version 2023.5.3","text":"R 4.3.0 .character(lubridate::now()) adds microseconds, breaks SQL upload. now replaced cstime::now_c().","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-2023414","dir":"Changelog","previous_headings":"","what":"Version 2023.4.14","title":"Version 2023.4.14","text":"Changed “success” “succeeded” update_config_tasks_stats","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-2023413","dir":"Changelog","previous_headings":"","what":"Version 2023.4.13","title":"Version 2023.4.13","text":"DBPartitionedTableExtended_v9$info() bug fixed argument collapse=TRUE. Inclusion confirm_indexes DBPartitionedTableExtended_v9.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-2023412","dir":"Changelog","previous_headings":"","what":"Version 2023.4.12","title":"Version 2023.4.12","text":"DBPartitionedTableExtended_v9$nrow() now new argument collapse=FALSE provides partion-specific results DBPartitionedTableExtended_v9$info() now includes sizes MB","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202343","dir":"Changelog","previous_headings":"","what":"Version 2023.4.3","title":"Version 2023.4.3","text":"Bug fix DBPartitionedTableExtended_v9$nrow()","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202342","dir":"Changelog","previous_headings":"","what":"Version 2023.4.2","title":"Version 2023.4.2","text":"Extension DBPartitionedTableExtended_v9 easier use multiple partitioning variables.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202341","dir":"Changelog","previous_headings":"","what":"Version 2023.4.1","title":"Version 2023.4.1","text":"Inclusion partitions_randomized DBPartitionedTableExtended_v9 running parallel, database tables don’t get locked. Inclusion remove_table DBPartitionedTableExtended_v9 Fixed error RAM calculation parallel get_config_tasks_stats","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-2023331","dir":"Changelog","previous_headings":"","what":"Version 2023.3.31","title":"Version 2023.3.31","text":"DBTableExtended_v9 now automatically includes column tables, called auto_last_updated_datetime, automatically calculated time row changed. Creation DBPartitionedTableExtended_v9, allows one dataset partitioned amongst multiple SQL tables automatically.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202338","dir":"Changelog","previous_headings":"","what":"Version 2023.3.8","title":"Version 2023.3.8","text":"SurveillanceSystem_v9 constructor now takes argument called implementation_version, can used identify version analytics code currently run. update_config_last_updated now replaced update_config_tables_last_updated (contains tables last updated) config_tasks_stats (contains runtimes tasks). SurveillanceSystem_v9 now uses internal R6 class DBTableExtended_v9 (extends csdb::DBTable_v9) instead using csdb::DBTable_v9 directly. DBTableExtended_v9 calls update_config_last_updated altering database table.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-202337","dir":"Changelog","previous_headings":"","what":"Version 2023.3.7","title":"Version 2023.3.7","text":"sc8 deprecated favor cs9.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-802","dir":"Changelog","previous_headings":"","what":"Version 8.0.2","title":"Version 8.0.2","text":"Allows multiple databases used different access levels. copy_into_new_table_where now also copies indexes. V8 schemas now nice print function. V8 redirects now nice print function. copy_into_new_table_where uses tablock. upsert_at_end_of_each_plan insert_at_end_of_each_plan can now take named lists return value action_fn. Custom progressr handler.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-801","dir":"Changelog","previous_headings":"","what":"Version 8.0.1","title":"Version 8.0.1","text":"using sc8::add_task_from_config_v8 schema list checked make sure actually schemas. solve issue people incorrectly add non-existent schemas task. insert_data, upsert_data, drop_all_rows_and_then_insert_data now recommended ways inserting data addin_load_production schemas now use load_folder_fn, dynamically check user permission write folder, solving permissions errors Including tm_get_schema_names granularity_time granularity_geo now included db censors Requires R >= 4.1.0 sc8::config$plan_attempt_index now exists. running plans parallel, plan fails retried five times. lets user track attempt . mostly useful emails smses sent sc8::config$plan_attempt_index==1 (Disabled) TABLOCK disabled right now due issues data uploaded. (Disabled) Data sorted sending bcp speed /upserts.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-800","dir":"Changelog","previous_headings":"","what":"Version 8.0.0","title":"Version 8.0.0","text":"Release schema redirects allow restricted anonymous datasets seamlessly used people different access rights Consistent naming task_from_config_v8 add_schema_v8","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-714","dir":"Changelog","previous_headings":"","what":"Version 7.1.4","title":"Version 7.1.4","text":"db_insert_data, db_upsert_data, db_drop_all_rows_and_then_upsert_data now recommended ways inserting data","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-713","dir":"Changelog","previous_headings":"","what":"Version 7.1.3","title":"Version 7.1.3","text":"update_config_datetime get_config_datetime now automatically record database table updates well","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-712","dir":"Changelog","previous_headings":"","what":"Version 7.1.2","title":"Version 7.1.2","text":"Updating default db schemas explicit useage isotime.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-711","dir":"Changelog","previous_headings":"","what":"Version 7.1.1","title":"Version 7.1.1","text":"qsenc_save qsenc_read save/read /encrypted files.","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-710","dir":"Changelog","previous_headings":"","what":"Version 7.1.0","title":"Version 7.1.0","text":"task_from_config_v3 sets new direction creation tasks management tasks describe_tasks describe_schemas help automatic documentation","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-708","dir":"Changelog","previous_headings":"","what":"Version 7.0.8","title":"Version 7.0.8","text":"task_inline_v1 allows easy inline task creation Corresponding RStudio addin inline tasks copy one db table another","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-707","dir":"Changelog","previous_headings":"","what":"Version 7.0.7","title":"Version 7.0.7","text":"copy_into_new_table_where allows creation new table old table Including task_from_config_v2 First RStudio addin","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-706","dir":"Changelog","previous_headings":"","what":"Version 7.0.6","title":"Version 7.0.6","text":"write_data_infile now checks Infinite/NaN values sets NA","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-705","dir":"Changelog","previous_headings":"","what":"Version 7.0.5","title":"Version 7.0.5","text":"Task now includes action_before_fn action_after_fn","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-704","dir":"Changelog","previous_headings":"","what":"Version 7.0.4","title":"Version 7.0.4","text":"validator_field_contents_sykdomspulsen now allows baregion valid granularity_geo","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-703","dir":"Changelog","previous_headings":"","what":"Version 7.0.3","title":"Version 7.0.3","text":"tm_get_plans_argsets_as_dt provides overview plans argsets within task","code":""},{"path":"https://www.csids.no/cs9/news/index.html","id":"version-702","dir":"Changelog","previous_headings":"","what":"Version 7.0.2","title":"Version 7.0.2","text":"keep_rows_where now also retains PK constraints","code":""}]
